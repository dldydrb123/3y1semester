소프트웨어

프로그램을 비롯해 개발 과정에서 생성되는 모든 산출물과 문서와 사용자 메뉴얼 등 모두 포함

프로그램 = 원시코드


소프트웨어의 특징

제조가 아닌 개발, 소모가 아닌 품질 저하

개발 과정이 복잡하고, 참여 인원이 많으며, 개발 기간이 길다.


소프트웨어 공학

한정된 기간과 비용의 제약을 받는 고품질의 소프트웨어 개발을 효율적으로  하기 위한 방법


소프트웨어 개발 과정

계획->분석->설계->구현->테스트->유지보수


소프트웨어 개발 프로세스

일정, 예산, 자원과 같은 제약조건을 포함하는 일련의 활동


소프트웨어 개발 프로세스 모델

프로세스 개발 과정과 품질 관리 등 모든 프로세스를 명확히 하여
고품질의 프로그램을 만드는게 목적이다.

프로젝트의 기본 골격이 되어 일정 수립과 자원의 산정과 분배, 의사소통 기준 수립
용어의 표준화 등 개발 진행 과정과 상황을 명확히 파악할 수 있게 해준다.


프로세스 모델의 종류

주먹구구식 모델
어설프게 솦 개발 과정을 흉내내는 모델

폭포수 모델
고전적 생명 주기를 가지고 개발 과정이 하향식으로 진행되며, 병행하거나 거슬러 반복하지 않는다.
각 단계가 모두 끝나야 다음 단계로 넘어가게 된다.

요구사항 분석이 끝나면 '요구분석명세서' 문서를 작성하고 설계 절차로 넘어간다.
이것으로 책임 소재를 분명히 한다.

장점
관리가 용이하고, 체계적으로 문서화가 가능하며, 요구사항의 변화가 적은 프로젝트에 적합하다.

단점
각 단계는 앞 단계가 완료되어야 수행할 수 있다.
각 단계마다 완벽하게 진행해야 다음 단계에 오류를 전달하지 않는다.
사용자가 중간에 가시적인 결과를 볼 수 없다.

V 모델
각 개발 단계를 검증하는데 초점을 두어 오류를 줄인다.

폭포수 모델의 개발 과정에서 구현 이후에
단위, 통합, 시스템, 인수 테스트를 거쳐 오류를 검증한다.


진화적 모델
새로운 요구 사항에 유연하게 대처 가능하며
프로토타입 모델, 나선형 모델이 진화적 모델의 일종이다.

프로토타입의 대표적인 예로 모델하우스가 있는데
아파트 완공까지 2년은 걸리므로 미리 아파트 모델하우스를 만들어 고객에게 어필한다.

프로토타이핑(프로토타입+ing)
사용자의 초기 요구사항을 반영해 1차 프로토타입을 만들고 사용자는 추가 요구나 수정을 요구하고
개발자는 이런 요구사항을 받아들여 2차 프로토타입을 만든다.


프로토타입 모델의 개발 절차

요구사항 정의 및 분석->프로토타입 설계->프로토타입 개발-> 사용자에 의한 프로토타입 평가

프로토타입 모델의 장점
가시적인 모델로 사용자가 요구사항을 충분히 제시할 수 있고, 유지 보수에  필요한 노력과 시간을 줄일 수 있다.

단점
투입 인력과 비용 산정이 어렵다.
프로토타이핑의 과정을 관리.통제하기 어렵다


나선형 모델
나선형 모델도 프로토타입의 일종으로 프로그램 개발 과정을 n차 반복하여
사용자의 요구를 충분히 반영 가능하다.

나선형 모델의 위험 분석 단계는 소프트웨어 개발 과정의 방해되는 모든 것을 말하는데,
빈번한 요구사항 변경, 팀원들의 경험 부족, 결속력이 떨어지는 팀워크, 프로젝트 관리 부재 등
위험 요소들을 말한다.

나선형 모델의 개발 과정은
계획 및 초기 요구분석->n차 위험 분석->n차 프로토타입 개발->n차 사용자 평가
의 반복이다

나선형 모델의 장점
심각한 사태가 일어날 확률이 비교적 적다.
사용자 요구가 충분히 반영된다.

단점
프로젝트 기간이 길어지고, 반복이 잦아지면 프로젝트 관리가 어려워진다.
위험 관리 전문가가 필요하다.

단계적 개발 모델
릴리스 1을 개발하고 사용자가 릴리스 1을 사용하는 동안 개발자는 릴리스 n을 만드는 것을 반복한다.

릴리스 구성 방법에 따라 점증적 개발과 반복적 개발로 나뉜다.


점증적 개발
개발 범위의 증가:양식의 코스요리 처럼 하나가 끝나면 그다음, 또 하나가 끝나면 그다음 으로 하나씩 늘려간다.

중요하다고 생각되는 부분부터 차례로 개발한 후 그 일부를 이용해 개발 범위를 늘려 가는 방식이다.

예1: 도서 집필 시 1장을 완벽히 쓰고 2장, 3장~~~ 10장까지 완성해 나가는 방식으로
가장 중요하다고 생각되는 부분부터 원고를 집필한다.

예2: 3층 건물 건축 시 1층을 완벽하게 지은 후 경제적으로 여건이 갖춰지면 2층을 올리고
다시 돈을 벌고 3층을 짓는 방식이다.

예3: 대학 종합정보시스템 개발 시 가장 중요한 교무/학사 관련 시스템을 개발하고
회계 업무 등 다른 시스템을  차츰 개발하는 방식이다.


단계적 개발 모델은 개발해야 할 시스템 전체를 독립성 높은 서브 시스템으로 분할하고,
각 서브시스템을 단계적으로 하나씩 릴리스해 완성하는 방법이다.
5개의 서브시스템으로 구성되어 있다면 첫 번째 서브시스템을 먼저 개발하고
두 번째 서브시스템을 개발하는데 첫 번째 서브시스템과의 인터페이스를 유지하면서 개발한다.
이 과정을 n번째까지 마지막 서브시스템까지 개발하여 시스템을 완성하는 구조다
가장 핵심적이고 중요한 서브시스템부터 진행한다.

이 방식은 한꺼번에 많은 비용을 들이지 않고, 완전히 새로운 시스템이 조직에 주어졌을 때
조직이 받는 충격을 완화한다.

개발 측면에서 이미 사용하고 있는 서브시스템이 있어 어떤 유형으로 개발해야 할지 잘 알 수 있으므로
사용자에게 원하는 결과를 가져다줄 수 있다.

문제점도 있는데 서브시스템을 설계할 때마다 개발할 다른 서브시스템과의 연관성도 고려해야 한다.
서브시스템들의 통합이 어려울 수 있다.

반복적 개발은 품질의 증가를 염두에 둔다